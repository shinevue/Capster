You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI, Supabase, and Tailwind.

Code Style and Structure
- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.

Naming Conventions
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

Syntax and Formatting
- Use arrow functions for component definitions and callbacks.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.

UI and Styling
- Use Shadcn UI, Radix, and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.

Performance Optimization
- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use Next.js Image component, WebP format, include size data, implement lazy loading.

Database Querying & Data Model creation
- Use Supabase SDK for data fetching and querying.
- For data model creation, use Supabase's schema builder.

Key Conventions
- Use 'nuqs' for URL search parameter state management.
- Optimize Web Vitals (LCP, CLS, FID).
- Limit 'use client':
  - Favor server components and Next.js SSR.
  - Use only for Web API access in small components.
  - Avoid for data fetching or state management.

Project Structure
- Utilize the App Router structure with the `/app` directory.
- Use nested folders within `/app` for routing, with `page.tsx` files defining routes.
- Implement layout files (`layout.tsx`) for shared UI across pages.

SEO Optimization
- Use Next.js Metadata API for dynamic meta tags and OpenGraph images.
- Implement structured data (JSON-LD) for rich search results.
- Ensure proper heading hierarchy and semantic HTML for better accessibility and SEO.

Follow Next.js docs for Data Fetching, Rendering, and Routing best practices with the App Router.